#!/usr/bin/env Rscript
suppressPackageStartupMessages(library(RCurl))
suppressPackageStartupMessages(library(tidyverse))
suppressPackageStartupMessages(library(optparse))
suppressPackageStartupMessages(library(futile.logger))
suppressPackageStartupMessages(library(parallel))
suppressPackageStartupMessages(library(benchmarkme))
suppressPackageStartupMessages(library(openxlsx))
#####################################
# Define System-specific Functions ##
#####################################
if ((.Platform$OS.type) != "unix"){
    stop("This script only works on UNIX. Install Linux and try again.")
}

#Get slurm job ID
slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))

#Decide which kind of system you are on.
if(nchar(slurmjobid) < 3){
   print("You are not on a Slurm Workload Cluster")
   #Define appropriate functions for non-slurm system
   detectBatchCPUs <- function() {
        ncores <- detectCores()
        if (is.na(ncores)) {
            stop("Could not determine how many CPUs you have. Aborting.")
        }
        return(ncores)
    }

    detectAvailRAM <- function(){
        totmembytes<-as.numeric(get_ram())

        return(totmembytes)
    }

} else {
    print(paste("You are on a Slurm Workload Manager Cluster under jobID", slurmjobid))
    #Define appropriate functions for slurm system
    detectBatchCPUs <- function() {
        ncores <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))
        if (is.na(ncores)) {
            ncores <- as.integer(Sys.getenv("SLURM_JOB_CPUS_PER_NODE"))
        }
        if (is.na(ncores)) {
            stop("Could not determine how many CPUs you have. Aborting.")
        }
        return(ncores)
    }

    detectAvailRAM <- function(){
        mempercpu <- as.integer(Sys.getenv("SLURM_MEM_PER_CPU"))
        mempernode <- as.integer(Sys.getenv("SLURM_MEM_PER_NODE"))
        cpuspertask <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))

        if (!(is.na(mempernode))){
            totmem <- mempernode
        } else {
            totmem <- mempercpu * cpuspertask
        }

        totmembytes <- totmem * 1000000

        return(totmembytes)
    }
}

############################
## Define other functions ##
############################
filetype <- function(path){
    f = file(path)
    ext = summary(f)$class
    close.connection(f)
    ext
}

# get path of running script
getScriptPath <- function() {
    cmdArgs <- commandArgs(trailingOnly = FALSE)
    needle <- "--file="
    match <- grep(needle, cmdArgs)
    if (length(match) > 0) {
        return(dirname(normalizePath(sub(needle, "", cmdArgs[match]))))
    } else {
        return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
    }
}

#Fix path relativity
fixrelpath <- function(JAMSpath = NULL){
    require(R.utils)
    if (!(isAbsolutePath(JAMSpath))){
        fixedpath <- getAbsolutePath(JAMSpath)
    } else {
        fixedpath <- JAMSpath
    }

    return(fixedpath)
}

#########################
# Get options from args #
#########################
#Define defaults
defopt <- list()
defopt$verstr <- paste0("JAMSmakeswarm v", "1.0")
defopt$outputfolder <- getwd()
defopt$readsfolder <- file.path(defopt$outputfolder, "rawreads")
defopt$hostspecies <- "human"
defopt$analysis <- "metagenome"
defopt$skipinterpro <- FALSE
defopt$jamsdb <- "/data/MicrobiomeCore/JAMSdb/db"
defopt$swarmfile <- fixrelpath(JAMSpath = "JAMS.swarm")

option_list <- list(
    make_option(c("-r", "--readsfolder"), default = defopt$readsfolder, action="store",
                help = str_c("path to root directory where reads are (default: ", defopt$readsfolder, ")")),
    make_option(c("-o", "--outputfolder"), default = defopt$outputfolder, action="store",
                help = str_c("path to where you want the JAMSalpha outputs (default: ", defopt$outputfolder, ")")),
    make_option(c("-H", "--hostspecies"), default = defopt$hostspecies, action="store",
                help = str_c("Name or taxid of host species (default: ", defopt$hostspecies, ")")),
    make_option(c("-A", "--analysis"), default = defopt$analysis, action="store",
                help = str_c("Project type. Choose between metagenome, metatranscriptome, isolate or isolaternaseq. (default: ", defopt$analysis, ")")),
    make_option(c("-d", "--jamsdb"), default = defopt$jamsdb, action="store",
                help = str_c("Path to JAMS database (default: ", defopt$jamsdb, ")")),
    make_option(c("-p", "--prefixlist"), default = NULL, action="store",
                help = str_c("Text file with a list of read prefixes to restrict swarm to.")),
    make_option(c("-n", "--skipinterpro"), default = FALSE, action="store_true",
                help = str_c("Use -n option in swarm file, for skipping InterproScan, even if available.)")),
    make_option(c("-s", "--swarmfile"), default = defopt$jamsdb, action="store",
                help = str_c("File name for swarm file to be created (default: ", defopt$swarmfile, ")")),
    make_option(c("-v", "--version"), action="store_true",
                help ="report version")
)

# parse the options
args <- commandArgs(trailingOnly = TRUE)
opt <- parse_args(OptionParser(option_list=option_list), args)
opt <- merge.list(opt, defopt)

#####################
## Set environment ##
#####################

# print version & exit if -v
if (!is.null(opt$version)) {
    print(opt$verstr)
    quit()
}

#Get Script path
opt$bindir <- getScriptPath()

for (pathtofix in c("readsfolder", "outputfolder", "prefixlist", "swarmfile")){
    if (!is.null(opt[[pathtofix]])){
        opt[[pathtofix]] <- fixrelpath(opt[[pathtofix]])
    }
}

#Define useful functions
is.redundant<-function(vec){
    propunique <- length(unique(vec))/length(vec)
    if (propunique < 1){
        redundant = TRUE
    } else {
        redundant = FALSE
    }

    return(redundant)
}

find_container<-function(x) {
    prefsuff<- unlist(strsplit(rawfastqsdf$Filenames[x], split = "\\."))
    container <- paste(prefsuff[(which(prefsuff %in% c("fastq", "tar"))):(length(prefsuff))], collapse = ".")

    return(container)
}

find_read<-function(x) {
    prefsuff <- unlist(strsplit(rawfastqsdf$Filenames[x], split = "\\."))
    read <- tail(unlist(strsplit(prefsuff[1], split = "_")), n=1)

    return(read)
}

###################
## Main Function ##
###################
#suppressPackageStartupMessages(library(JAMS))
#Load prefix list if present
if (!(is.null(opt$prefixlist))){
    wantedprefixes <- read.table(opt$prefixlist, header = FALSE, sep = " ", stringsAsFactors = FALSE)
    wantedprefixes <- as.character(wantedprefixes[, 1])
}

commonoptions <- paste("-d", opt$jamsdb, "-A", opt$analysis, "-o", opt$outputfolder, "-H", opt$hostspecies, collapse = " ")
if (opt$skipinterpro == TRUE) {
    commonoptions <- paste(commonoptions, "-n", collapse = " ")
}

if (!(is.null(opt$readsfolder))){
    flog.info("Searching for reads files in reads folder.")
    rawfastqpaths <- list.files(path = opt$readsfolder, pattern = "fastq", full.names = TRUE, recursive = TRUE)
    rawfastqnames <- sapply(1:length(rawfastqpaths), function(x) { tail(unlist(strsplit(rawfastqpaths[x], split = "/")), n = 1) })
    datasetids <- sapply(1:length(rawfastqpaths), function(x) { tail(unlist(strsplit(rawfastqpaths[x], split = "/")), n = 2)[1] })

    #Make a dataframe with all the info
    rawfastqsdf <- data.frame(Filenames = rawfastqnames, Filepaths = rawfastqpaths, DatasetIDs = datasetids, stringsAsFactors = FALSE)
    rawfastqsdf$Read <- sapply(1:nrow(rawfastqsdf), function(x) { find_read(x) } )
    rawfastqsdf$Container <- sapply(1:nrow(rawfastqsdf), function(x) { find_container(x) } )
    rawfastqsdf$Prefix <- sapply(1:nrow(rawfastqsdf), function(x) { paste(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_"))[1:((which(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_")) == tail(unlist(strsplit(rawfastqsdf$Filenames[x], split = "_")), n = 4)[1])) - 1)], collapse = "_") } )

    if (!(is.null(opt$prefixlist))){
         rawfastqsdf <- subset(rawfastqsdf, Prefix %in% wantedprefixes)
         if (nrow(rawfastqsdf) < 1){
             flog.info("Could not find a single prefix requested in the reads folder supplied.")
             q()
         }
    }

    prefixestouse <- unique(rawfastqsdf$Prefix)
    swarm <- NULL
    for (p in 1:length(prefixestouse)){
        prefix <- prefixestouse[p]
        relevantfiles <- subset(rawfastqsdf, Prefix == prefix)
        if (all(c("R1", "R2") %in% relevantfiles$Read)) {
            FR <- paste("-f", relevantfiles$Filepaths[which(relevantfiles$Read == "R1")], sep = " ")
            RR <- paste("-r", relevantfiles$Filepaths[which(relevantfiles$Read == "R2")], sep = " ")
            readsinput <- paste(FR, RR)
        } else {
            if (relevantfiles$Container[1] == "tar.gz"){
                readsinput <- paste("-t", relevantfiles$Filepaths[1])
            } else {
                readsinput <- paste("-U", relevantfiles$Filepaths[1])
            }
        }
        swarm[p] <- paste("JAMSalpha", readsinput, commonoptions, "-p", prefix, collapse = " ")
    }

}

#Write swarm file to system
write.table(swarm, file = opt$swarmfile, sep = "\n", row.names = FALSE, col.names = FALSE, quote = FALSE)
