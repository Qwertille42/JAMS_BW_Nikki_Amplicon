#!/usr/bin/env Rscript
suppressWarnings(suppressPackageStartupMessages(library(optparse)))
suppressWarnings(suppressPackageStartupMessages(library(futile.logger)))
suppressWarnings(suppressPackageStartupMessages(library(benchmarkme)))
suppressWarnings(suppressPackageStartupMessages(library(tidyverse)))
suppressWarnings(suppressPackageStartupMessages(library(RCurl)))
suppressWarnings(suppressPackageStartupMessages(library(parallel)))
suppressWarnings(suppressPackageStartupMessages(library(openxlsx)))

#####################################
# Define System-specific Functions ##
#####################################
if ((.Platform$OS.type) != "unix"){
    stop("This script only works on UNIX. Install Linux and try again.")
}

#Decide which kind of system you are on.
detectHardwareResources <- function(){
    #First off, detect if on Slurm type cluster
    #Get slurm job ID
    currslurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))

    if(nchar(currslurmjobid) < 3){
       #Define appropriate functions for non-slurm system
       detectBatchCPUs <- function() {
            ncores <- detectCores()
            if (is.na(ncores)) {
                stop("Could not determine how many CPUs you have. Aborting.")
            }
            return(ncores)
        }

        detectAvailRAM <- function(){
            totmembytes<-as.numeric(get_ram())

            return(totmembytes)
        }

    } else {
        #Define appropriate functions for slurm system
        detectBatchCPUs <- function() {
            slurmjobid <- as.character(Sys.getenv("SLURM_JOB_ID"))
            ncores <- as.numeric(Sys.getenv("SLURM_CPUS_PER_TASK"))

            if (is.na(ncores)) {
                #Try plan B
                sacctraw <- system2("sacct", args = c("-j", slurmjobid, "-X", "-P"), stdout = TRUE)
                jobinforaw <- sacctraw[2]
                jobinfoheaders <- sacctraw[1]
                jobinfo <- unlist(strsplit(jobinforaw, split="\\|"))
                names(jobinfo) <- unlist(strsplit(jobinfoheaders, split="\\|"))
                ncores <- as.integer(jobinfo["AllocCPUS"])
                print(jobinfo)
                if (is.na(ncores)) {
                    stop("Could not determine how many CPUs you have. Aborting.")
                }
            }

            return(ncores)
        }

        detectAvailRAM <- function(){
            mempercpu <- as.integer(Sys.getenv("SLURM_MEM_PER_CPU"))
            mempernode <- as.integer(Sys.getenv("SLURM_MEM_PER_NODE"))
            cpuspertask <- as.integer(Sys.getenv("SLURM_CPUS_PER_TASK"))

            if(!(is.na(mempernode))){
                totmem <- mempernode
            } else {
                totmem <- mempercpu * cpuspertask
            }

            totmembytes <- totmem * 1000000

            return(totmembytes)
        }
    }
    hardwareRes <- NULL
    hardwareRes[1] <- detectBatchCPUs()
    hardwareRes[2] <- detectAvailRAM()
    names(hardwareRes) <- c("threads", "memory")

    return(hardwareRes)
}

############################
## Define other functions ##
############################
filetype <- function(path){
    f = file(path)
    ext = summary(f)$class
    close.connection(f)
    ext
}

# get path of running script
getScriptPath <- function() {
    cmdArgs <- commandArgs(trailingOnly = FALSE)
    needle <- "--file="
    match <- grep(needle, cmdArgs)
    if (length(match) > 0) {
        return(dirname(normalizePath(sub(needle, "", cmdArgs[match]))))
    } else {
        return(dirname(normalizePath(sys.frames()[[1]]$ofile)))
    }
}

#########################
# Get options from args #
#########################
#Define defaults
defopt <- list()
defopt$verstr <- paste0("fastqprefixrenamer v", "1.0")
defopt$readsfolder <- getwd()
defopt$destination <- getwd()
defopt$maintain_Illumina_format <- FALSE
defopt$move <- FALSE
defopt$simulate <- FALSE
defopt$threads <- as.numeric(detectHardwareResources()["threads"])

option_list <- list(
    make_option(c("-r", "--readsfolder"), default = defopt$readsfolder, action="store",
                help = str_c("path to root directory where reads are (default: ", defopt$readsfolder, ")")),

    make_option(c("-d", "--destination"), default = defopt$destination, action="store",
                help = str_c("path to root directory where reads are (default: ", defopt$destination, ")")),

    make_option(c("-t", "--substitutionmap"), default = NULL, action="store",
                help = str_c("Tab limited text file for sample name substitution in the format: oldname[TAB]newname")),

    make_option(c("-x", "--substitutionspreadsheet"), default = NULL, action="store",
                help = str_c("xlsx spreadsheet for sample name substitution. The first column is for the original prefix and the second column is for the new sample name. The first row is for column names, which can be anything, like OriPrefix and Sample, for example. If there are sample names on the firstrow, they will be ignored.")),

    make_option(c("-i", "--maintain_Illumina_format"), default = defopt$maintain_Illumina_format,
                action="store_true", help = str_c("Maintain filenames in Illumina format after prefix substitution, i.e. OldPrefix_S264_L003_R1_001.fastq.gz becomes NewPrefix_S264_L003_R1_001.fastq.gz. (default: FALSE. Illumina file OldPrefix_S264_L003_R1_001.fastq.gz becomes NewPrefix_R1.fastq.gz.) See https://support.illumina.com/help/BaseSpace_OLH_009008/Content/Source/Informatics/BS/NamingConvention_FASTQ-files-swBS.htm for naming convention")),

    make_option(c("-m", "--move"), default = defopt$move, action="store_true",
                help = str_c("Move to destination rather than copy. (default: FALSE.)")),

    make_option(c("-c", "--checkprefixexists"), default = NULL,
                action="store", help = str_c("Optional path to folder with banked .jams files. If prefix already exists, a warning is issued, will abort before start of renaming.")),

    make_option(c("-s", "--simulate"), default = defopt$simulate, action="store_true",
                help = str_c("Simulate and print commands for renaming, do not actually rename.")),

    make_option(c("-v", "--version"), action="store_true",
                help ="report version")
)

# parse the options
args <- commandArgs(trailingOnly = TRUE)
opt <- parse_args(OptionParser(option_list = option_list), args)
opt <- merge.list(opt, defopt)

#####################
## Set environment ##
#####################

# print version & exit if -v
if (!is.null(opt$version)) {
    print(opt$verstr)
    quit()
}

#Get Script path
opt$bindir <- getScriptPath()

#Fix path relativity
fixrelpath <- function(JAMSpath = NULL){
    require(R.utils)
    if (!(isAbsolutePath(JAMSpath))){
        fixedpath <- getAbsolutePath(JAMSpath)
    } else {
        fixedpath <- JAMSpath
    }
    #Chomp a "/" from the end of paths
    fixedpath <- gsub("/$", "", fixedpath)

    return(fixedpath)
}

for (pathtofix in c("readsfolder", "destination", "substitutionmap", "substitutionspreadsheet", "checkprefixexists")){
    if (!is.null(opt[[pathtofix]])){
        opt[[pathtofix]] <- fixrelpath(opt[[pathtofix]])
    }
}

# give help if needed input option not provided
if (is.null(opt$readsfolder)) {
    print("You must supply a folder with reads to rename.")
    parse_args(OptionParser(option_list = option_list), c("-h"))
    q()
}


#Define useful functions
is.redundant <- function(vec){
    propunique <- length(unique(vec))/length(vec)
    if (propunique < 1){
        redundant = TRUE
    } else {
        redundant = FALSE
    }

    return(redundant)
}

find_container <- function(x) {
    prefsuff <- unlist(strsplit(rawfastqsdf$Filenames[x], split = "\\."))
    container <- paste(prefsuff[(which(prefsuff == "fastq")):(length(prefsuff))], collapse = ".")

    return(container)
}

analyze_fastq_filename <- function(fn = NULL, maintain_Illumina_format = FALSE){

    filefacts <- list()
    fnsplit <- unlist(strsplit(fn, split = "\\."))
    #find out if gzipped and what the filename body is
    if (tail(fnsplit, n = 1) == "gz"){
        filefacts$gunzipped <- TRUE
        fnbody <- paste0(rev(rev(fnsplit)[3:length(fnsplit)]), collapse = ".")
        filefacts$suffix <- paste0(tail(fnsplit, n = 2), collapse = ".")
    } else {
        filefacts$gunzipped <- FALSE
        fnbody <- paste0(rev(rev(fnsplit)[2:length(fnsplit)]), collapse = ".")
        filefacts$suffix <- tail(fnsplit, n = 1)
    }

    #Now delve into fnbody and see what it it about
    #Does it have lane info? Must have L00X in the last 4 elements.
    contains_lane_info <- any(c("L001", "L002", "L003", "L004", "L005", "L006", "L007", "L008") %in% tail(unlist(strsplit(fnbody, split = "_")), n = 4))
    #Does it have paired read info? Must have RX in the last 4 elements.
    contains_paired_read_info <- any(c("R1", "R2") %in% tail(unlist(strsplit(fnbody, split = "_")), n = 4))
    #Is it Illumina output filename style?
    is_Illumina_output <- (tail(unlist(strsplit(fnbody, split = "_")), n = 1) == "001")
    #Get number of body segments
    numfnbodysegments <- length(unlist(strsplit(fnbody, split = "_")))

    #Determine the orgininal sample prefix
    #Case 1, not Illumina style
    if (!is_Illumina_output){
        if (contains_paired_read_info){
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 1)], collapse = "_")
            filefacts$Read <- tail(unlist(strsplit(fnbody, split = "_")), n = 1)
        } else {
            filefacts$OriPrefix <- fnbody
            filefacts$Read <- ""
        }
        filefacts$Appendage <- paste0(".", filefacts$suffix)
    } else {
        #OK, is Illumina style prefix
        #Das Read ist immer an zweiter position
        filefacts$Read <- tail(unlist(strsplit(fnbody, split = "_")), n = 2)[1]

        if (contains_lane_info){
            #Case 2, is MiSeq, HiSeq or NextSeq file
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 4)], collapse = "_")
            filefacts$Lane <- tail(unlist(strsplit(fnbody, split = "_")), n = 3)[1]
            filefacts$SampNum <- tail(unlist(strsplit(fnbody, split = "_")), n = 4)[1]
            if (maintain_Illumina_format){
                filefacts$Appendage <- paste(paste(filefacts$SampNum, filefacts$Lane, filefacts$Read, "001", sep = "_"), filefacts$Container, sep = ".")
            } else {
                filefacts$Appendage <- paste(filefacts$Read, filefacts$suffix, sep = ".")
            }
        } else {
            #Case 3, is NovaSeq joined file, or contains no lane info
            filefacts$OriPrefix <- paste0(unlist(strsplit(fnbody, split = "_"))[1:(numfnbodysegments - 3)], collapse = "_")
            filefacts$Lane <- ""
            filefacts$SampNum <- tail(unlist(strsplit(fnbody, split = "_")), n = 3)[1]
            if (maintain_Illumina_format){
                filefacts$Appendage <- paste(paste(filefacts$SampNum, filefacts$Read, "001", sep = "_"), filefacts$suffix, sep = ".")
            } else {
                filefacts$Appendage <- paste(filefacts$Read, filefacts$suffix, sep = ".")
            }
        }
    }

    return(filefacts)

}

###################
## Main Function ##
###################

if (opt$destination != opt$readsfolder){
    flog.info("Destination directory and origin are different.")
    if (!(file.exists(opt$destination))){
        flog.info("Creating directory to hold renamed output reads.")
        dir.create(opt$destination, recursive = TRUE)
    }
}

setwd(opt$destination)
opt$projimage <- file.path(opt$destination, ".RData")
save.image(opt$projimage)

#Find fastq files at the origin
rawfastqpaths <- list.files(path = opt$readsfolder, pattern = "fastq", full.names = TRUE, recursive = TRUE)
rawfastqnames <- sapply(1:length(rawfastqpaths), function(x) { tail(unlist(strsplit(rawfastqpaths[x], split = "/")), n = 1) })

#Make a dataframe with all the info
rawfastqsdf <- data.frame(Filenames = rawfastqnames, Filepaths = rawfastqpaths, stringsAsFactors =
FALSE)
#Figure out the original prefix
rawfastqsdf$OriPrefix <- sapply(1:nrow(rawfastqsdf), function(x){ analyze_fastq_filename(fn = rawfastqsdf$Filenames[x])$OriPrefix})
#Figure out apporpriate file appendage
rawfastqsdf$Appendage <- sapply(1:nrow(rawfastqsdf), function(x){ analyze_fastq_filename(fn = rawfastqsdf$Filenames[x], maintain_Illumina_format = opt$maintain_Illumina_format)$Appendage })

save.image(opt$projimage)

#Load substitution map
#Adjust prefix if there is a substitution map
if (!(is.null(opt$substitutionmap))){
    submap <- read.table(opt$substitutionmap, header = FALSE, sep = "\t", stringsAsFactors = FALSE)
    colnames(submap) <- c("OriPrefix", "Prefix")
} else if(!(is.null(opt$substitutionspreadsheet))){
    submap <- read.xlsx(opt$substitutionspreadsheet)
    colnames(submap) <- c("OriPrefix", "Prefix")
} else {
    flog.info("If you want to rename samples, you must provide a substitution map. Aborting now.")
    q()
}

# Make sure class of all columns are characters
for (colm in 1:ncol(rawfastqsdf)){
    rawfastqsdf[ , colm] <- as.character(rawfastqsdf[ , colm])
}
for (colm in 1:ncol(submap)){
    submap[ , colm] <- as.character(submap[ , colm])
}

#Test for redundancy in substitution map.
redtestsubmap <- apply(submap, is.redundant, MARGIN = 2)
if (any(redtestsubmap)){
    flog.warn(paste("Values in substitution table column(s)" , paste0(names(which(redtestsubmap == TRUE)), collapse = " and "), "are not unique. Check table and try again. Aborting now"))
    q()
}

rawfastqsdf <- subset(rawfastqsdf, OriPrefix %in% (submap$OriPrefix))

if (nrow(rawfastqsdf) < 1){
    flog.info("No fastq files bearing the original prefixes in the substitution table provided were found. Aborting now.")
    q()
}

#Tack on the new prefixes
rawfastqsdf <- left_join(rawfastqsdf, submap, by = "OriPrefix")

get_new_fn <- function(Prefix = NULL, Appendage = NULL){
    if (substr(Appendage, 1, 1) == "."){
        NewFN <- paste0(Prefix, Appendage)
    } else {
        NewFN <- paste(Prefix, Appendage, sep = "_")
    }
}

rawfastqsdf$NewFN <- sapply(1:nrow(rawfastqsdf), function (x) { get_new_fn(Prefix = rawfastqsdf$Prefix[x], Appendage = rawfastqsdf$Appendage[x]) } )

if (is.redundant(rawfastqsdf$NewFN)){
    flog.warn("There is more than one output fastq file with the same prefix. Check input reads folder substitution table and try again. Aborting now.")
    dupes <- rawfastqsdf$NewFN[duplicated(rawfastqsdf$NewFN)]
    flog.warn(paste("The following new prefixes are duplicated:", paste0(dupes, collapse = ", ")))
    dupefns <- rawfastqsdf$NewFN[which(rawfastqsdf$NewFN %in% dupes)]
    flog.warn(paste("The following proposed output filenames are identical:", paste0(dupefns, collapse = ", ")))
    q()
}

#Check if new prefix has already been used.
if (!is.null(opt$checkprefixexists)){
    flog.info(paste("Checking if new prefixes proposed in substitution table coincide with prefixes found in:", as.character(opt$checkprefixexists)))
    jamsfns <- list.files(path = opt$checkprefixexists, pattern=".jams$")
    usedprefixes <- sapply(1:length(jamsfns), function(x) { unlist(strsplit(jamsfns[x], split="\\."))[1] } )
}

prefixestouse <- unique(rawfastqsdf$Prefix)
if (!is.null(opt$checkprefixexists)){
    if (length(usedprefixes) > 0){
        alreadyusedprexixes <- prefixestouse[(prefixestouse %in% usedprefixes)]
        if (length(alreadyusedprexixes) > 0){
            flog.warn(paste("WARNING: THE FOLLOWING PREFIXES HAVE BEEN FOUND IN", as.character(opt$checkprefixexists)))
            flog.warn(paste0(alreadyusedprexixes, collapse = "\n"))
            flog.warn("Check your filenames and substitution table. ABORTING NOW.")
            q()
        } else {
            flog.info("None of the proposed new prefixes have been used previously")
        }
    }
}
save.image(opt$projimage)

rawfastqsdf$NewFullFN <- file.path(opt$destination, rawfastqsdf$NewFN)

#Copy or move the files
if (opt$move == TRUE){
    manipcmd <- "mv"
} else {
    manipcmd <- "cp"
}

rencommands <- sapply(1:nrow(rawfastqsdf), function(x) { paste(manipcmd, rawfastqsdf$Filepaths[x], rawfastqsdf$NewFullFN[x], collapse = " ") } )

if (opt$simulate){
    flog.info("This is a simulation. Commands for renaming when not simulating are:")
    print(rencommands)
} else {
    for (cmd in rencommands){
        flog.info(paste("Renaming with command", cmd))
        system(cmd)
    }
}

save.image(opt$projimage)
