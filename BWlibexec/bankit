#!/bin/bash
##Set defaults
copyfiles="false"
deletefolder="false"
dosample="false"
helixcore="/data/MicrobiomeCore/WSMGS_John"

##Get options
message_use="
bankit.sh
By John McCulloch
Cleans up completed JAMS alpha runs on Biowulf/Helix


Use: $(basename "$0") [options] -d </path/to/destination> -o </path/to/origin> -p [prefix.list]

-h Help;
-v Version;
-d /path/to/destination (must already exist)
-o /path/to/origin (with *_JAMS.tar.gz files)
-c Copy files (do not move them). Default is to move.
-x Delete JAMS project folder at origin if it exists. 
-p prefix.list file containing list of prefixes. If not present, will bank all prefixes which look complete in the origin directory.

"

version="0.32"
verdate="FEB-2019"
message_ver="bankit.sh ver $version by John McCulloch $verdate"

#Define functions
function die {
    echo "$@" >&2
    exit 1
}

function report2log {
    now=$(date "+%Y-%m-%d %H:%M:%S") 
    echo "${now} -> $@" >> "$destination"/bankit_log.txt
    echo "$@"
}

#Get options
usage () { echo "$message_use"; }
version () { echo "$message_ver"; }
options=':d:o:p:xchv'
while getopts $options option
do
    case $option in
        d  ) destination="$OPTARG" ;;
        o  ) origin="$OPTARG" ;;
        p  ) prefixlist="$OPTARG" ;;
        c  ) copyfiles="true" ;;
        x  ) deletefolder="true" ;;
        v  ) version; exit;;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

shift $(($OPTIND - 1))

#First, check for stupid decisions.
if [ ! -d  "$destination" ]
then
    die "Destination directory not found. Please check or correct manually."
else
    report2log "Destination directory found and looks OK."
fi

#Define command for moving or copying
if [ "$copyfiles" == "true" ]
then
    cmdtype="cp"
else
    cmdtype="mv"
fi

#Find prefixes
if [ -f "$prefixlist" ]
then
    report2log "A list of prefixes was supplied as $prefixlist"
    prefixes=`cat "$prefixlist" | tr '\n' ' '`
else
    report2log "Prefix list not supplied. Will look for completed samples in origin folder based on *JAMS.tar.gz files."
    prefixes=`ls "$origin"/*_JAMS.tar.gz | rev | cut -f 2- -d "_" | cut -f 1 -d "/" | rev | tr '\n' ' '`
fi

if [ "$deletefolder" == "true" ]
then
    report2log "You have asked that JAMS folders be deleted if present."
fi

#Now we have the prefixes, see if they are vaild.
if [ "$prefixes" != "" ]
then
    report2log "Will bank JAMS results for the following samples: $prefixes"
else
    report2log "No valid prefixes supplied or completed JAMS runs found in the origin directory. Aborting now."
    die "No valid prefixes supplied or completed JAMS runs found in the origin directory. Aborting now."
fi

#Run the show for each sample.
cd "$origin"
for prefix in $prefixes
do
    report2log "Now processing sample $prefix"
    #See what we have
    jamsfile="$prefix".jams
    jamsarchive="$prefix"_JAMS.tar.gz
    jamsreads=`ls "$prefix"_*_reads.tar.gz`
    jamspdf1="$prefix"_JAMSalpha_report.pdf

    #Only go ahead for that sample if JAMS archive, file and log are present. Else skip sample.
    if [ ! -f "$jamsarchive" ] || [ ! -f "$jamsfile" ] || [ ! -f "$jamspdf1" ]
    then
        report2log "Seems that at least one of the files is not present. Skipping sample $prefix"
        dosample="false"
    else
        report2log "All necessary files are present."
        dosample="true"
    fi

    #Go ahead with banking if applicable.
    if [ "$dosample" == "true" ]
    then
        mkdir -p "$destination"/JAMStarballs
        mkdir -p "$destination"/jamsfiles
        mkdir -p "$destination"/reports

        report2log "Banking $jamsarchive"
        `echo "$cmdtype" "$jamsarchive" "$destination"/JAMStarballs/`
        report2log "Banking $jamsfile"
        `echo "$cmdtype" "$jamsfile" "$destination"/jamsfiles/`
        report2log "Banking JAMS pdf reports."
        `echo "$cmdtype" "$jamspdf1" "$destination"/reports/`

        #Bank reads if they are present.
        if [ -e "$jamsreads" ]
        then
            report2log "JAMS reads found. Banking them now."
            mkdir -p "$destination"/reads
            `echo "$cmdtype" "$jamsreads" "$destination"/reads/`
        else
            report2log "No JAMS reads found."
        fi

        #Get rid of JAMS directory if applicable.
        if [ "$deletefolder" == "true" ] && [ -d "$origin"/"$prefix"_JAMS ]
        then
            report2log "Deleting JAMS folder for sample $prefix"
            #do this safely
            cd "$prefix"_JAMS
            projectdir=`pwd`
            cd "$origin"
            rm -r "$projectdir"
        fi

    report2log "Sample $prefix has been banked to $destination"

    fi
done
