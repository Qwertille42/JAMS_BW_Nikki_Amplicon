#!/bin/bash
##Define defaults and parameters
##Set environment
threads=$(( SLURM_CPUS_PER_TASK ))
nouncomp="false"
tarup="false"
substitutionmap=""
runs=""
message_use="

joinlanesIlluminaBaseSpaceProject.sh
By John McCulloch
Joins lanes.

Use: $(basename "$0") [options] -o /path/to/project -r runname -d /path/to/destination/

-h Help
-v Version
-o Path of directory where the projects are;
-r List of runs. For more than one, put in single quotes separated by a space: 'run1 run2'. Or omit this option to find all sequence files in the directory of origin. Beware of repeated sample names, as these will be overwritten;
-d Path of directory where you want the merged reads.
-s /path/to/sub.map -> Optional tab limited text file for sample name substitution in the format: oldname[TAB]newname
-t Output joined lanes as a tarball (reads.tar.gz) rather than two separate fastq files. (Default is to NOT tar up.) 

Caveats: 
fastq files must be in the format: Sample_S10_L004_R1_001.fastq.gz, etc.

"

version="0.35"

message_ver="
joinlanesIlluminaBaseSpaceProject.sh ver $version
by John McCulloch MAY-2018
"

#Get options
usage () { echo "$message_use"; }
version () { echo "$message_ver"; }
function die {
    echo "$@" >&2
    exit 1
}

options=':o:r:d:s:btvh'
while getopts $options option
do
    case $option in
        o  ) origin="$OPTARG" ;;
        r  ) runs="$OPTARG" ;;
        d  ) destination="$OPTARG" ;;
        s  ) substitutionmap="$OPTARG" ;;
        t  ) tarup="true" ;;
        v  ) version; exit;;
        h  ) usage; exit;;
        \? ) echo "Unknown option: -$OPTARG" >&2; exit 1;;
        :  ) echo "Missing option argument for -$OPTARG" >&2; exit 1;;
        *  ) echo "Unimplemented option: -$OPTARG" >&2; exit 1;;
    esac
done

shift $(($OPTIND - 1))

#Chomp an eventual / on the end of the path
origin=`echo $origin | sed $'s/\/$//g'`
destination=`echo $destination | sed $'s/\/$//g'`

#Find out if user has pigz
pigztest=$( { pigz -V; } 2>&1 )
deptest=`echo $pigztest | grep -c -i "not found"`
if [ "$deptest" -gt "0" ]
then
    report2log "Pigz was not found. Will use gzip instead."
    uncompressexe="gunzip"
else
    echo "Pigz is installed. Will use it to decompress faster."
    uncompressexe="pigz -p $threads -d"
fi

#Define functions
function report2log {
    now=$(date "+%Y-%m-%d %H:%M:%S") 
    echo "${now} -> $@" >> "$destdir"/join_log.txt
    echo "$@"
}

countfastqreads(){
    wc -l $1 | awk -F'[\t]' '{print $1/4}'
}
export -f countfastqreads

mkdir -p $destination
cd "$destination"/
destdir=`pwd`
cd -

report2log "joinlanesIlluminaBaseSpaceProject.sh version $version  by John McCulloch."
report2log "Will join the lanes of samples found in the following runs: $runs"
if [ "$tarup" == "true" ]
then
    report2log "Will compress each sample fastq files into a tarball."
fi

report2log "You have $threads CPUs."

if [ "$substitutionmap" != "" ]
then
    if [ -f "$substitutionmap" ]
    then
        mapname=`echo ${substitutionmap##*/}`
        report2log "Will use $mapname for substituting BaseSpace prefix names."
        cp "$substitutionmap" "$destdir"/
    else
        die "Could not find the substitution file. Please use the full path."
    fi
fi

#Determine runs if not explicitly set
if [ "$runs" == "" ]
then
    cd "$origin"
    runs=`find . -name *.gz | cut -f 2 -d "/" | sort | uniq`
    cd -
fi

cd "$destdir"/
#Gather files and put them all into a single directory

for run in $runs
do
    target="$origin"/"$run"
    list=`find "$target" -name '*.gz' | grep -i -v "Undetermined"`
    mkdir temporaryfolder
    for file in $list
    do
        report2log "Copying $file"
        cp "$file" temporaryfolder/
    done

    #Now, join them all up by sample.
    cd temporaryfolder/
    #files must be in the format: PD1S26_S10_L004_R1_001.fastq.gz
    #Get list of samples available
    samples=`ls *.gz | rev | cut -f 5- -d "_" | rev | sort | uniq`

    report2log "Will now join lanes pertaining to samples $samples"

    #Cycle through samples and join lanes
    for i in $samples
    do
        report2log "Processing sample $i"
        mkdir temp
        mv "$i"_*.fastq.gz temp/
        cd temp/
        basename=`ls -l | tail -1 | rev | cut -f 1 -d " " | rev | cut -f 1 -d "_"`
        R1s=`ls *_R1_* | sort`
        R2s=`ls *_R2_* | sort`
        report2log "Basespace sample name is $basename"
        if [ "$substitutionmap" != "" ]
        then
            prefix=`cat "$destdir"/"$mapname" | grep -w "$basename" | cut -f 2`
            report2log "Will substitute $basename with $prefix as prefix."
        else
            prefix="$basename"
            report2log "Will use original Basespace prefix ( $prefix ) as prefix."
        fi
        
        cat $R1s > "$prefix"_R1.fastq.gz
        cat $R2s > "$prefix"_R2.fastq.gz
        rm $R1s
        rm $R2s

        #Uncompress if required
        if [ "$nouncomp" != "true" ]
        then
            report2log "Uncompressing reads."
            `echo "$uncompressexe"` *.gz
        else
            report2log "Will not uncompress reads."
        fi
        
        #Check that files have same number of reads, if not, something went wrong.
        numR1=`countfastqreads "$prefix"_R1.fastq`
        numR2=`countfastqreads "$prefix"_R2.fastq`
        report2log "$prefix R1 has $numR1 reads; $prefix R2 has $numR2 reads."
        if [ "$numR1" != "$numR2" ]
        then
            report2log "It seems that the input R1 and R2 files for sample $prefix ( $basename ) do NOT have the same number of reads!"
            report2log "Will flag the read filenames with *_diffnum to denote this situation."
            mv "$prefix"_R1.fastq "$prefix"_R1_diffnum.fastq
            mv "$prefix"_R2.fastq "$prefix"_R2_diffnum.fastq
        else
            report2log "Checked: R1 and R2 for sample $prefix have the same number of reads."
        fi

        #Move it to the destination folder.
        if [ "$tarup" == "true" ]
        then
            report2log "Compressing fastq files into a tarball."
            tar cf - *.fastq | pigz -9 -p "$threads" > "$destdir"/"$prefix"_raw_reads.tar.gz
        else
            report2log "Moving fastq files to destination folder."
            mv *fastq "$destdir"/
        fi
        cd ../
        rm -r temp/
        report2log "$prefix has been processed."
    done
    cd $destdir
    rm -r temporaryfolder
done
